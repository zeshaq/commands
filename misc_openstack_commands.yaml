ssh ubuntu@172.16.0.2 -i ~/.local/share/juju/ssh/juju_id_rsa
juju --watch 10s

juju run-action --wait vault/leader reissue-certificates



juju run --unit keystone/leader leader-get admin_passwd
juju run-action --wait grafana/leader show-admin-password

juju run-action grafana/leader get-admin-password --model cos --wait

se9deungahHei4Se
beehungahVo3veim
117bd8160cdd1b95a91709c923baa6ac

juju config nova-cloud-controller console-access-protocol=novnc


juju run-action --wait grafana/0 get-admin-password
 juju show-status-log elasticsearch/0
watch --color juju status --color --relations


juju deploy --channel 8.0/stable mysql-router magnum-mysql-router
juju add-relation magnum-mysql-router:db-router mysql-innodb-cluster:db-router
juju add-relation magnum-mysql-router:shared-db magnum:shared-db

juju add-relation keystone:identity-service ironic-api:identity-service
juju add-relation ironic-api:certificates vault:certificates


juju run-action \
    --wait vault/0 get-root-ca --format json \
    | jq -r '."unit-vault-0".results.output' \
    | base64 -w 0 \
    | xargs -I {} juju config openstack-service-checks trusted_ssl_ca={}







juju add-cloud --client -f configs.yaml maas-one
juju add-credential --client -f configs.yaml maas-one
juju add-model --config default-series=jammy openstack


sudo snap install maas-test-db
sudo snap install maas --channel=3.3/stable
sudo maas init region+rack --maas-url http://150.16.0.3:5240/MAAS --database-uri maas-test-db:///
sudo maas createadmin --username admin --password admin --email admin@example.com --ssh-import gh:zeshaq
sudo maas apikey --username admin > ~ubuntu/admin-api-key



juju run-action ceilometer/0 ceilometer-upgrade --wait
juju add-relation vault:certificates gnocchi:certificates
juju add-relation vault:certificates aodh:certificates




 juju deploy --channel 8.0/stable mysql-router vault-mysql-router
juju add-relation barbican-mysql-router:db-router mysql-innodb-cluster:db-router
juju add-relation barbican-mysql-router:shared-db vault:shared-db



 sudo snap install juju --channel 3.2/stable
mkdir -p ~/.local/share


juju debug-log --tail --replay


// when deploying kubernetes 
sysctl -w net.ipv4.conf.default.rp_filter=0 ;
sysctl -w "net.ipv4.conf.all.rp_filter=1"
cat /proc/sys/net/ipv4/conf/all/rp_filter


juju run-action ceph-osd/2 list-disks --wait

juju run-action --wait ceph-osd/2 zap-disk i-really-mean-it=true devices=/dev/sdb
juju run-action ceph-osd/2 add-disk osd-devices=/dev/sdd --wait


#openstack final commands

juju config nova-cloud-controller console-access-protocol=novnc

sudo snap install openstackclients
git clone https://github.com/openstack-charmers/openstack-bundles ~/openstack-bundles
source ~/openstack-bundles/stable/openstack-base/openrc
env | grep OS_
openstack endpoint list --interface admin

OS_PASSWORD=xair3ahgohyis8Mi
OS_PASSWORD=xair3ahgohyis8Mi


mkdir ~/cloud-images
wget http://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img \
   -O ~/cloud-images/jammy-amd64.img



openstack image create --public --container-format bare \
   --disk-format qcow2 --file ~/cloud-images/jammy-amd64.img \
   jammy-amd64

openstack flavor create --ram 2048 --disk 20 --ephemeral 20 m1.small






mkdir ~/cloud-keys

ssh-keygen -q -N '' -f ~/cloud-keys/user1-key

openstack keypair create --public-key ~/cloud-keys/user1-key.pub admin

openstack security group create --description 'Allow SSH' Allow_SSH
openstack security group rule create --proto tcp --dst-port 22 Allow_SSH

openstack server create --image jammy-amd64 --flavor m1.small \
   --key-name admin --network user1_net --security-group Allow_SSH \
   jammy-2
 
 openstack server create --image jammy-amd64 --flavor m1.small \
 jammy-2

FLOATING_IP=$(openstack floating ip create -f value -c floating_ip_address ext_net)
openstack server add floating ip jammy-2 $FLOATING_IP

openstack server list
openstack console log show jammy-1
ssh -i ~/cloud-keys/user1-key ubuntu@$FLOATING_IP


 





juju run-action --wait neutron-hacluster/2 pause
